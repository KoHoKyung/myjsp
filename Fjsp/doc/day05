# day05_01.txt

   Servlet ( 서블릿/ Server Applet)
      - JSP 파일로 문서를 작성을 하면
        이 파일이 응답이 되는 것이 아니고
        자바 class 파일로 되어서 실행이 되어지고
        그 결과를 응답해 주는 것이다.
        
        - 모든 JSP 파일은 httpJspBase 클래스를 상속받아서 만들어지는 클래스이다.
        - 따라서 우리가 서블릿 클래스를 상속받은 클래스를 직접 만들 수 있다면
          서버 입장에서는 JSP를 서블릿 클래스로 변환하는 작업을 줄일 수 있을 것이고
          처리 속도도 향상 될 것이다.
          
       [참고]
          Web 페이지를 만드는 기술의 변천사
          
             Model 1 
                - JSP 문서내에서 처리하는 기술
             Model 1
                - MVC 패턴을 이용해서 처리하는 기술
                   
                   Model      -   데이터
                   View      -   화면
                   Controller   - 요청처리,   데이터를 조작
                   
   ------------------------------------------------------------------------------------
         
         서블릿 클래스를 만드는 방법
         
            1. HttpServlet 클래스를 상속 받은 클래스를 제작한다.
            
            2. 제작한 클래스내에 4개의 함수를 오버라이드 한다.
            
               1) public void init() trows ServletException{}
                  - init 시점에 실행되는 함수
                     서버가 기동되고 맵핑된 요청이 처음 왔을 경우
                     처음 딱 한번만 실행 된다.
                     일단 자바 클래스로 생각하자면 생성자 함수에 해당이 된다.
               2. public void doPost(HttpServletRequest req, HttpServletResponse resp)
                              throws ServletException, IOException {}
                              
               3. public void getPost(HttpServletRequest req, HttpServletResponse resp)
                              throws ServletException, IOException {}
                  - 2., 3. 모두 service 시점에서 실행되는 함수
                    따라서 실제로 클라이언트에게 응답하는 내용은 이 안에 작성하면 된다.
                    
                  ※ doGet, doPost 의 차이점은 클라이언트의 요청방식에 따른 것이다.
                      Get 방식으로 요청을 하면 doGet 함수가 실행이 되고
                      Post 방식으로 요청을 하면 doPost 함수가 실행된다.
                    ※ public void service(HttpServletRequest req, HttpServletResponse resp)
                                throws ServletException, IOException{}
                                를 만들어서 사용한다면 두가지 방식을 모두 처리한다.
                                
               4. public void destroy(){} ※ 거의 제작할 일이 없다.
               
                  - destroy 시점에서 실행되는 함수
                    따라서 이 부분에서는 그 클래스가 주로 사용하던 자원을
                    
                    제거하거나 반환해주는 목적으로 사용한다.
                    
              [참고]
                 서블릿의 생존주기
                 
                    init      서블릿 클래스가 맨 처음 만들어질 때 (객체로) 실행 됨. 
                      |         ※ (누군가 맨 처음 이 클래스를 요청을 한 경우 딱 한번 실행)
                      |
                    service      누군가 이 클래스를 요청한 경우 실행 됨.
                      |         ※ (요청을 할 때 마다 실행 된다.)
                      |
                    destroy      지정한 시기 동안 요청이 전혀 없는 경우의 시점에 실행됨.
                             ※ (주로 사용하던 자원을 닫는 목적으로 사용됨.)
                             
                    
      ------------------------------------------------------------------------------------
      
         ***
         서버의 기동 순서
         
            1. 먼저 tomcat에 있는 설정 파일들 (xml파일들)을 읽어서 처리한다.
            
            2. 프로젝트에 정의되어 있는 설정파일들을 읽어서 처리한다.
            
               - 따라서 xml 파일에 뭔가 정의가 되어 있다면 서버가 기동되는
                 순간 처리가 되어 질 것이고 처리가 된 내용은 서버가 서비스를 
                 하고 있는 중에는 계속 적용될 것 이다.
                 
            3. 따라서 xml 파일에 뭔가 정의가 되어 있다면
                
      ------------------------------------------------------------------------------------
      
         ***
         서블릿 클래스 요청 등록 방법
            1. web.xml 에 서블릿 이름을 만들고 요청을 매핑한다.
            
               [형식]
               
                 a. 매핑할 서블릿 클래스의 이름을 정한다.
            <servlet>
               <servlet-same> 이름 </servlet-name>
               <servlet-class> 제작한 클래스 패키지 경로와 클래스</servlet-class>
            </servlet>
            
                 b. 요청매핑을 해준다.
            <servlet-mapping>
               <servlet-name> 위에서 정의한 서블릿 이름 </servlet-name>
               <url-pattern> 요청내용 </url-pattern>
            </servlet-mapping>
                           
            2. 어노테이션을 이용해서 등록한다.
               
               [형식]
                  제작한 서블릿 클래스 앞에
                     @WebServlet("매핑할 주소")
            
====================================================================================
   
   web.xml 의 적용범위
      
      1. tomcat 의 web.xml
         ==> 서버에서 서비스하는 모든 사이트에 공통적으로 적용되는 설정
      2. 프로젝트의 WEB-INF/web.xml
         ==> 프로젝트 내에서만 적용되는 설정
         
====================================================================================           
                              
                     
               